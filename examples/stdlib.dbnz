
def zero(ptr)
; Zeroes out the  value pointed to by `ptr`.
dbnz ptr, this - 1

def dec(ptr)
; Simple decrement and move to next instruction.
dbnz ptr, this + 1

def inc(ptr)
; Increments ptr by one, and moves to the next instruction.
zero(@1)
dec(@1)
:zerotmp          ; @1 is already decremented once; we decrement ptr MAX-1 times.
dec(ptr)
dbnz @1, zerotmp

def jmp(label)
; Unconditionally jumps to the address pointed to by `label`.
dbnz @1, label
dbnz @1, label

def dynjmp(label)
; A value cannot be zero for two decrements in a row. If the label is required to be dynamic, the second call can simply jump back to the first whenever it falls through:
dbnz @1, label
dbnz @1, this - 3


def halt(status)
; Causes the interpreter to exit with the specified status code, by jumping to a specially interpreted unaligned address.
add(status, status)
inc(status)
jmp(status)

def add(ptr, tgt)
; Adds the value at `ptr` to `tgt`.
zero(@1)
:zeroptr          ; zero out ptr, adding MAX - ptr to @1
dec(@1)
dbnz ptr, zeroptr
                  ;
:zerotmp          ; zero out @1, adding MAX - @1 (ie. the original value of ptr) to ptr and tgt
dec(ptr)
dec(tgt)
dbnz @1, zerotmp

def dup(ptr, tgt)
; Duplicates the value at ptr to tgt
zero(tgt)
add(ptr, tgt)

def sub(ptr, tgt)
; Subtracts the value at ptr from tgt
zero(@1)
:zeroptr          ; zero out ptr, adding MAX - ptr to @1
dec(tgt)
dec(@1)
dbnz ptr, zeroptr
                  ;
:zerotmp          ; Start decrementing the wrapped value at ptr until its original value is restored
dec(ptr)
dbnz @1, zerotmp

add( &72, data     )      ; H
add(&101, data +  1)      ; e
add(&108, data +  2)      ; l
add(&108, data +  3)      ; l
add(&111, data +  4)      ; o
add( &44, data +  5)      ; ,
add( &32, data +  6)      ;
add(&119, data +  7)      ; w
add(&111, data +  8)      ; o
add(&114, data +  9)      ; r
add(&108, data + 10)      ; l
add(&100, data + 11)      ; d
add( &33, data + 12)      ; !
                              ; ^ Hello, world!
add(&100, data + 13)
sub( &58, data + 13)      ; 42
                              ; The answer to life, the universe, and everything
dup(data + 13, data + 14) ; Everyone deserves a second chance
halt(0)
